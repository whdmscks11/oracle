-- MEMBER 테이블 과 NOTICE 테이블의 병합
SELECT * FROM MEMBER;
SELECT * FROM NOTICE;

-- 두 테이블은 사용자의 ID로 서로 연관 되어 있다. MEMBER 테이블의 ID = NOTICE 테이블의 WRITER_ID
-- MEMBER 테이블의 ID명이 NOTICE 테이블에서 여러번 사용 되고 있다. 
-- 이에 따라 MEMBER 테이블이 부모 테이블이 되고 NOTICE 테이블이 자식 테이블이 된다. 

SELECT * FROM MEMBER INNER JOIN NOTICE ON MEMBER.ID = NOTICE.WRITER_ID; -- INNER는 생략 가능
-- 출력 결과를 보면 MEMBER 테이블의 joseph88과 whdns, NOTICE 테이블의 MR.HEE와 UNKNOWN의 데이터를 찾아 볼 수 없다.
-- 이들은 서로의 테이블에서 참조되지 않아 OUTER로 분류 된다. 따라서 INNER JOIN의 결과에는 포함되지 않은 것이다. 

-- OUTER JOIN 
SELECT * FROM MEMBER M LEFT OUTER JOIN NOTICE N ON M.ID = N.WRITER_ID;
SELECT * FROM MEMBER M RIGHT OUTER JOIN NOTICE N ON M.ID = N.WRITER_ID;
SELECT * FROM MEMBER M FULL OUTER JOIN NOTICE N ON M.ID = N.WRITER_ID;

-- ID, NAME 그리고 회원별 작성한 게시글 수를 조회하시오
SELECT M.ID, M.NAME, COUNT(N.ID) FROM MEMBER M JOIN NOTICE N ON M.ID = N.WRITER_ID GROUP BY M.ID, M.NAME;
SELECT M.ID, M.NAME, COUNT(N.ID) FROM MEMBER M LEFT OUTER JOIN NOTICE N ON M.ID = N.WRITER_ID GROUP BY M.ID, M.NAME;

SELECT * FROM MEMBER M JOIN MEMBER B ON M.BOSS_ID = B.ID; -- MEMBER 테이블의 BOSS_ID 가 자기자신의 ID와 같은경우 // BOSS_ID -> 기준
SELECT * FROM MEMBER M JOIN MEMBER B ON M.ID = B.BOSS_ID; -- MEMBER 테이블의 ID 가 자기자신의 BOSS_ID와 같은경우 // ID -> 기준
-- 회원정보를 조회할 때, 해당 회원이 상사가 있다면 상사의 이름도 출력
SELECT M.*, B.NAME FROM MEMBER M LEFT OUTER JOIN MEMBER B ON M.BOSS_ID = B.ID;